Coordinator Functions (All RPC unless specified otherwise)

	- Create a request queue for all of the clients to add to
	- Place a lock on the file that the request pertains to
	- Then follow the Read or Write function

	File CoordinatorRead(File file):
		- Assemble read quorum randomly according to the Nr + Nw > Ntotal rule
		- Scan for the file with the highest version number from each of the quorum servers (ServerGetVersion)
		- Return the file object with the highest version number (ServerGet)

	Status CoordinatorWrite(File file):
		- Assemble write quorum randomly according to the Nw > (Ntotal / 2) rule
		- Scan the quorum for the highest version number
		- Apply the write to those file objects (ServerWrite)
		- Replace the other old versions with the new File object (ServerUpdate)
		- Push the new file to all of the other servers not in the quorum (pushHelper-non RPC)

	Status pushHelper(int fileId) (non RPC):
		- loop through all servers and call ServerUpdate on them


Server Functions (All RPC unless specified otherwise)
	
	Status ServerUpdate(int fileId):
		- Take the input file and find the same file in the folder object
		- replace the file object with the new one passed in

	Status ServerWrite(int fileId):
		- Apply write
		- Update the version number on the file

	File ServerGet(int fileId):
		- Take the input id passed in and return the corresponding File object

	int ServerGetVersion(int fileId):
		- Locate the file and return its version number
		


- Queue is so all of the clients can contact the server at once and the server just grabs a request out of the queue
- Is a write different than replacing old versions? So different functions that both just increment the version number?
- *NOTE* Will need to go through and double check we use the file's Id and the file itself properly for each function. 

